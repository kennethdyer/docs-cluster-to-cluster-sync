.. _c2c-cutover-process:

========================
Finalize Cutover Process
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :class: singlecol
   :depth: 1

You can finalize a migration and transfer your application
workload from the source to the destination cluster using the
:ref:`mongosync <c2c-mongosync>` cutover process.

``mongosync`` should remain active until it reaches the
:ref:`COMMITTED <c2c-state-committed>` state. This allows ``mongosync`` to sync
any additional writes that occur during the migration.

.. note::

   Before you switch your application workload to the
   destination cluster, you should always verify a successful sync.
   For more information, see :ref:`c2c-verification`.

Steps
-----

.. procedure::
   :style: normal

   .. step:: Verify the status of the ``mongosync`` process.

      Call the :ref:`progress <c2c-api-progress>` endpoint to determine
      the status of ``mongosync`` before starting the cutover process.
      Ensure that the ``mongosync`` process status indicates the
      following values:

      - ``canCommit`` is ``true``.

      - ``lagTimeSeconds`` is small (near ``0``).

        If ``lagTimeSeconds`` isn't close to ``0`` when the cutover
        starts, cutover might take a long time.

      The following example returns the status of the synchronization process.

      Request
      ~~~~~~~

      .. literalinclude:: /includes/api/requests/progress.sh
         :language: shell

      Response
      ~~~~~~~~

      .. literalinclude:: /includes/api/responses/progress.json
         :language: json
         :copyable: false
         :emphasize-lines: 5, 8

   .. step:: Stop any write operations to the synced collections on the source.

      - If you started ``mongosync`` with ``enableUserWriteBlocking``
        set to ``true``, ``mongosync`` blocks all write operations on
        the entire source cluster during the commit (step 4) for you.
      - If you didn't start ``mongosync`` with
        ``enableUserWriteBlocking``, ensure that writes are disabled.
        For example, run the :dbcommand:`setUserWriteBlockMode` command on the
        source cluster:

        .. code-block:: javascript

           db.adminCommand( {
              setUserWriteBlockMode: 1,
              global: true 
           } )

      - If ``mongosync`` uses filtered sync, it's not necessary to
        disable writes to the entire source cluster. But you must ensure
        that write operations are stopped for the collections included
        by the filter.

   .. step:: Send a :ref:`commit <c2c-api-commit>` request to ``mongosync``.

      If you started multiple ``mongosync`` instances for your
      migration, you must issue a commit request for each ``mongosync``
      instance.

      Request
      ~~~~~~~~

      .. literalinclude:: /includes/api/requests/commit.sh
         :language: shell

      Response
      ~~~~~~~~

      .. literalinclude:: /includes/api/responses/success.json
         :language: json
         :copyable: false

      .. note::

         After you submit a ``commit`` request, call the ``progress`` endpoint
         to ensure that the ``mongosync`` state is ``COMMITTING`` or
         ``COMMITTED``.

   .. step:: Wait until you can perform writes on the destination cluster.

      Call the ``progress`` endpoint to determine if ``canWrite`` is
      ``true``. If ``canWrite`` is ``false``, wait until ``progress``
      shows ``canWrite`` is ``true``.

      .. io-code-block::
         :copyable: true

         .. input::
            :language: bash

            curl localhost:27182/api/v1/progress -XGET | jq ".progress.canWrite"

         .. output::
            :language: json

            true

   .. step:: Verify data transfer.

      Verify the successful sync of data from the source to the
      destination cluster.

      For more information, see :ref:`c2c-verification`.

   .. step:: Enable application writes on the destination cluster.

      To enable writes, update :dbcommand:`setUserWriteBlockMode`:

      .. code-block:: javascript

         db.adminCommand(
            {
               setUserWriteBlockMode: 1,
               global: false
            }
         )

      Then, transfer your application workload to the destination cluster.

   .. step:: Call the ``progress`` endpoint to determine the status of the ``mongosync`` process.

      When the ``mongosync`` progress response indicates that the
      ``mongosync`` state is ``COMMITTED``, the cutover process is
      complete.

      .. io-code-block::
         :copyable: true

         .. input::
            :language: bash

            curl localhost:27182/api/v1/progress -XGET | jq ".progress.state"

         .. output::
            :language: json

            "COMMITTED"

Behavior
--------

.. _c2c-canWrite-committed:

canWrite and COMMITTED
~~~~~~~~~~~~~~~~~~~~~~

``mongosync`` permits writes on the destination cluster at much earlier stage than
the ``COMMITTED`` state.

In the initial sync, ``mongosync`` replicates unique indexes on the source
cluster as non-unique indexes on the destination cluster. When writes are possible
on the destination cluster, ``mongosync`` begins to convert these non-unique indexes
to unique indexes.

This process may take a long time when syncing large collections. Queries
on the destination cluster that require a unique index may return unexpected
results.

Learn More
----------

- :ref:`c2c-verification`
- :ref:`c2c-api-start`
- :ref:`c2c-api-commit`
- :ref:`c2c-api-progress`
- :ref:`c2c-states`

