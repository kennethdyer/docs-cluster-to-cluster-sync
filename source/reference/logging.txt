.. _c2c-logging:

=======
Logging
=======

.. default-domain:: mongodb

{+c2c-full-product-name+} maintains a running log of events, including entries
such as the copying of collections and indexes, change stream events, and API calls. 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Destination
-----------

:program:`mongosync` can output log messages to stdout or to file.

By default, ``mongosync`` outputs log messages to stdout:

.. code-block:: console

   $ mongosync --config /etc/mongosync.conf

Example output:

.. code-block:: json 

   {"level":"info","mongosyncID":"shard02","verbosity":"INFO","id":"shard02","port":27301,"time":"2022-06-21T11:15:33-04:00","message":"Mongosync Options"}
   {"level":"info","mongosyncID":"shard02","time":"2022-06-21T11:15:33-04:00","message":"Initialized client0 with URI: mongodb://192.0.2.1:27130 and client1 with URI: mongodb://192.0.2.2:27140."}
   {"level":"info","mongosyncID":"shard02","time":"2022-06-21T11:15:33-04:00","message":"Preflight checks completed."}
   {"level":"info","mongosyncID":"shard02","time":"2022-06-21T11:15:33-04:00","message":"Launch replication thread"}

To output log messages to file, use the :option:`--logPath` option on the
command-line or the :setting:`logPath` setting in a configuration file.

.. code-block:: console

   $ mongosync --config /etc/mongosync.conf --logPath /var/log/mongosync

``mongosync`` creates a directory for the given path.  Log files are created
in this directory.  If a ``mongosync.log`` file already exists, ``mongosync``
rotates the files.

.. code-block:: console

   $ ls /var/log/mongosync
   mongosync-2022-06-17T16-27-58.187.log  mongosync.log
   mongosync-2022-06-21T13-31-42.668.log

To pretty print the logs, pipe the log to ``jq``:

.. code-block:: console

   $ cat /var/log/mongosync/mongosync.log

Example output:

.. code-block:: json
 
   {
      "level": "info",
      "mongosyncID": "shard02",
      "verbosity": "INFO",
      "id": "shard02",
      "port":27301,
      "time": "2022-06-21T11:15:33-04:00",
      "message": "Mongosync Options"
   }
   {
      "level": "info",
      "mongosyncID": "shard02",
      "time": "2022-06-21T11:15:33-04:00",
      "message": "Initialized client0 with URI: mongodb://192.0.2.1:27130 and client1 with URI: mongodb://192.0.2.2:27140."
   }
   {
      "level": "info",
      "mongosyncID": "shard02",
      "time": "2022-06-21T11:15:33-04:00",
      "message": "Preflight checks completed."
   }
   {
      "level": "info",
      "mongosyncID": "shard02",
      "time": "2022-06-21T11:15:33-04:00",
      "message": "Launch replication thread"
   }

Verbosity
---------

{+c2c-product-name+} supports user-defined verbosity to increase or decrease
the level of log messages :program:`mongosync` outputs.

The verbosity level can be set using the :option:`--verbosity` option from the
command-line or the :setting:`verbosity` setting in the configuration file.

Format
------

:program:`mongosync` outputs log messages in structured JSON format. Log messages
are written as a series of key-value pairs, where each key indicates a log message
field type, such as the severity level, log component, and timestamp.

.. code-block:: json

    {
        "level": "info",
        "mongosyncID": "shard01",
        "component": "Change Event Application",
        "time": "2022-06-21T09:31:42-04:00",
        "message": "Starting change stream reader."
    }


Log entries contain key-value pairs with the following fields:

.. list-table::
   :header-rows: 1

   * - Field
     - Description 

   * - ``applier``
     - Identifier of the event applier. 


   * - ``applierName``
     - Name of the event applier.


   * - ``arch``
     - The architecture of the system running ``mongosync``.
       For example, ``amd64``.


   * - ``attemptLimit``
     - Number of times ``mongosync`` will attempt the operation.


   * - ``attemptNumber``
     - The number of times ``mongosync`` has attempted the operation.


   * - ``body``
     - The body of a message sent to the HTTP API or the body of the message
       returned by an HTTP API call.


   * - ``client``
     - The cluster on which ``mongosync`` performs the operation.


   * - ``collection``
     - The collection ``mongosync`` operated on.


   * - ``collTempName``
     - Temporary named used for the collection ``mongosync`` operates on.


   * - ``command``
     - The operation performed by ``mongosync``.


   * - ``commit``
     - The Git commit used to build ``mongosync``.


   * - ``compiler``
     - The compiler used to build ``mongosync``.


   * - ``context``
     - The context of the operation.


   * - ``database``
     - The database ``mongosync`` operated on.


   * - ``destination``
     - The destination cluster (``cluster0`` or ``cluster1``).


   * - ``dispatcher``
     - The dispatcher that logged the message.


   * - ``dstUUID``
     - UUID of the destination cluster.


   * - ``durationLimit (seconds)``
     - The timeout value for the operation. 


   * - ``durationSoFar (seconds)``
     - The amount of time ``mongosync`` has spent on the operation.


   * - ``enableUserWriteBlocking``
     - Whether ``mongosync`` enables user write blocking on the source cluster.


   * - ``epochSeconds``
     - The Unix timestamp of the operation.


   * - ``errGroupName``
     - Name of the error group that logged the error.


   * - ``errGroupRoutineID``
     - Numeric identifier of the error group routine.


   * - ``error``
     - The error message returned by the operation.


   * - ``error code``
     - Numeric code identifying the error returned by the operation.


   * - ``go_version``
     - The version of Go used by ``mongosync``.


   * - ``id``
     - The value set on the :setting:`id` setting or the :option:`--id`
       option.


   * - ``lastApplyFailed``
     - Whether ``mongosync`` failed attempting the last apply.


   * - ``latency``
     - The amount of time it takes for the HTTP API to respond to a request.


   * - ``level``
     - The level of the log message.

       To configure the ``mongosync`` logging level, set the
       :setting:`verbosity` setting.


   * - ``logPath``
     - The value set on the :setting:`logPath` setting or the 
       :option:`--logPath`` option.


   * - ``message``
     - The log message.


   * - ``method``
     - The HTTP method used in an API call.  For example, ``POST`` or ``GET``.


   * - ``mongosyncID``
     - Identifies the ``mongosync`` instance.

       To set the identifier when running multiple instances of ``mongosync``,
       use the :setting:`id` setting.


   * - ``ordinalValue``
     - Provides the operation position of the last stored operation.


   * - ``os``
     - The operating system running ``mongosync``.


   * - ``outOfOrder``
     - Whether the operation is applied out of order.


   * - ``port``
     - The value of the :setting:`port` setting or the :option:`--port`
       option.


   * - ``reversible``
     - Whether ``mongosync`` can reverse the synchronization, replicating writes
       from the destination cluster to the source cluster.
       

   * - ``serverID``
     - Identifies the MongoDB instance. 


   * - ``source``
     - The source cluster (``cluster0`` or ``cluster1``).


   * - ``srcUUID``
     - UUID of the source cluster.


   * - ``status``
     - The response code given to a call to the HTTP API.


   * - ``time``
     - Time when the log message was generated.


   * - ``traceID``
     - Hash identifying the operation for trace.


   * - ``uri``
     - The URI of an API call. 


   * - UUID
     - UUID of the cluster ``mongosync`` operates on.


   * - ``verbosity``
     - The value set on the :setting:`verbosity` setting or the
       :option:`--verbosity` option.


Components
----------

Log entries use the ``componentName`` field to indicate the component that generated
the log message.

For example:

.. code-block:: json
   :copyable: false
   :emphasize: 5

   {
      "level":         "info",
      "serverID":      "0624a3e",
      "mongosyncID":   "coordinator",
      "componentName": "CHECKPOINT",
      "time":          "2022-07-13T17:44:09.837830382-04:00",
      "message":       "starting Mongosync from change event application phase."
   }

``mongosync`` uses the following components:

.. data:: Change Event Application

   Messages relate to the Change Event Application (CEA), which monitors a
   change stream on the source cluster and converts :ref:`change events
   <change-events>` into writes.


.. data:: Change Event dispatcher

   Messages relate to the Change Event Dispatcher, which batches change stream
   events from the source cluster.


.. data:: Change Event processor

   Messages relate to the Change Event Processor, which receives change stream
   events and applies them to the destination cluster.


.. data:: Change stream reader

   Messages relate to the Change Stream Reader, which reads change stream events
   on the source cluster and sends them to a channel for processing.


.. data:: CHECKPOINT

   Messages relate to snapshots taken before and after an operation.


.. data:: Collection Copy

   Messages relate to the copying of a collection from the source to destination
   cluster.


.. data:: Index Checker Service

   Messages relate to the Index Checker Service, which matches indexes on the
   source and destination clusters. 


Examples
--------

Examples of log messages.

.. toctree::
   :hidden:

   Format </reference/logging-format>
   Components </reference/logging-components>
